---
// src/pages/reporte.astro
import Layout from '../layouts/Layout.astro'; 
---
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Asignador de Actividades</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.29/jspdf.plugin.autotable.min.js" defer></script>

    <style>
      body {
        margin: 0;
        font-family: 'Segoe UI', sans-serif;
        background-color: #f9f9f9;
        color: white;
      }

      .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #0D1B2A;
        color: white;
        padding: 1rem 2rem;
        border-bottom: 4px solid #E63946;
      }

      .header .left,
      .header .right {
        display: flex;
        align-items: center;
        gap: 1rem;
      }

      .header button,
      .header a {
        background-color: #1D3557;
        color: white;
        padding: 0.5rem 1rem;
        text-decoration: none;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }

      .header button:hover,
      .header a:hover {
        background-color: #E63946;
      }

      .main {
        display: flex;
        flex-direction: row;
        gap: 2rem;
        padding: 2rem;
      }

      .left, .right {
        flex: 1;
        background-color: #0b1437;
        padding: 2rem;
        border-radius: 16px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.4);
      }

      input, button {
        margin: 0.5rem 0;
        padding: 0.6rem;
        width: 100%;
        border-radius: 8px;
        border: none;
        font-size: 1rem;
      }

      input {
        background-color: #e8f0fe;
        color: #000;
        border: 1px solid #bbb;
      }

      button {
        background-color: #007bff;
        color: white;
        font-weight: bold;
        cursor: pointer;
        transition: background 0.3s ease;
      }

      button:hover {
        background-color: #0056b3;
      }

      .list {
        margin-bottom: 1rem;
        color: #ddd;
      }

      .spinner {
        margin: 2rem auto;
        width: 80px;
        height: 80px;
        border: 10px solid #ccc;
        border-top: 10px solid #4caf50;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }

      #loading {
        text-align: center;
        display: none;
      }

      iframe {
        width: 100%;
        height: 100%;
        border: none;
      }

      h3 {
        margin-top: 1rem;
        margin-bottom: 0.5rem;
        color: #fff;
      }
    </style>
  </head>
  <body>
    <div class="header">
        <h2 style="margin-right: 2rem;">Actividades</h2>
        <a href="/sorteo" style="margin-right: 1.5rem;">Actualizar</a>
        <a href="/dashboard" style="margin-right: 1.5rem;">Dashboard</a>
        <a href="/reporte">Reporte</a>
        <form action="/api/auth/signout" method="post" style="margin-left: auto;">
          <button type="submit">Salir</button>
        </form>
      </div>
      
         <div ></div>
    <div class="main">
      <div class="left">
        <h3>Trabajadores</h3>
        <input id="workerInput" placeholder="Nombre del trabajador" />
        <button onclick="addWorker()">Agregar Trabajador</button>
        <ul id="workerList" class="list"></ul>

        <h3>Actividades</h3>
        <input id="taskInput" placeholder="Descripción de actividad" />
        <button onclick="addTask()">Agregar Actividad</button>
        <ul id="taskList" class="list"></ul>

        <button onclick="assignTasks()">Asignar Actividades</button>
      </div>

      <div class="right">
        <div id="loading">
          <div class="spinner"></div>
          <p>Asignando actividades...</p>
        </div>
        <div id="results"></div>
        <button id="downloadBtn" onclick="downloadPDF()" style="display:none; margin-top: 1rem;">Descargar Reporte PDF</button>
      </div>
    </div>

    <script type="module">
      let workers = [];
      let tasks = [];
      let lastAssignments = {};

      function updateLists() {
        document.getElementById('workerList').innerHTML = workers.map(w => `<li>${w}</li>`).join('');
        document.getElementById('taskList').innerHTML = tasks.map(t => `<li>${t}</li>`).join('');
      }

      window.addWorker = function () {
        const input = document.getElementById('workerInput');
        if (input.value.trim()) {
          workers.push(input.value.trim());
          input.value = '';
          updateLists();
        }
      }

      window.addTask = function () {
        const input = document.getElementById('taskInput');
        if (input.value.trim()) {
          tasks.push(input.value.trim());
          input.value = '';
          updateLists();
        }
      }

      window.assignTasks = function () {
        const resultsDiv = document.getElementById('results');
        const loadingDiv = document.getElementById('loading');
        const downloadBtn = document.getElementById('downloadBtn');

        resultsDiv.innerHTML = '';
        downloadBtn.style.display = 'none';

        if (workers.length === 0 || tasks.length === 0) {
          resultsDiv.innerHTML = '<p style="color:red">Debe ingresar al menos un trabajador y una actividad.</p>';
          return;
        }

        loadingDiv.style.display = 'block';

        setTimeout(() => {
          loadingDiv.style.display = 'none';

          const shuffledTasks = [...tasks].sort(() => Math.random() - 0.5);
          const assignments = {};
          workers.forEach(w => assignments[w] = []);

          let taskIndex = 0;
          while (taskIndex < shuffledTasks.length) {
            for (let w of workers) {
              if (taskIndex >= shuffledTasks.length) break;
              assignments[w].push(shuffledTasks[taskIndex]);
              taskIndex++;
            }
          }

          lastAssignments = assignments;

          let output = '<h3>Asignaciones:</h3><ul>';
          for (let [worker, tList] of Object.entries(assignments)) {
            output += `<li><strong>${worker}</strong>: ${tList.join(', ')}</li>`;
          }
          output += '</ul>';
          resultsDiv.innerHTML = output;

          downloadBtn.style.display = 'inline-block';
        }, 3000);
      }

      window.downloadPDF = function () {
        if (!window.jspdf || !window.jspdf.jsPDF) {
          alert('jsPDF aún no está cargado. Intenta de nuevo en unos segundos.');
          return;
        }

        const doc = new window.jspdf.jsPDF();
        doc.setFontSize(16);
        doc.text('Reporte de Asignación de Actividades', 20, 20);

        let y = 30;
        doc.setFontSize(12);

        doc.text('Trabajadores:', 20, y);
        workers.forEach(w => {
          y += 7;
          doc.text(`- ${w}`, 25, y);
        });

        y += 10;
        doc.text('Actividades:', 20, y);
        tasks.forEach(t => {
          y += 7;
          doc.text(`- ${t}`, 25, y);
        });

        y += 10;
        doc.text('Asignaciones:', 20, y);
        const today = new Date();
        const formattedDate = today.toLocaleDateString('es-EC');
        const tableData = Object.entries(lastAssignments).map(([worker, tList]) => ({
          trabajador: worker,
          actividades: tList.join(', '),
          fecha: formattedDate
        }));

        doc.autoTable({
          startY: y + 5,
          head: [['Trabajador', 'Actividades asignadas', 'Fecha']],
          body: tableData.map(row => [row.trabajador, row.actividades, row.fecha]),
          styles: {
            fontSize: 10,
            cellPadding: 3,
            textColor: [255, 255, 255],
            fillColor: [11, 20, 55]
          },
          headStyles: {
            fillColor: [29, 53, 87],
            textColor: [255, 255, 255],
            fontStyle: 'bold'
          },
          alternateRowStyles: { fillColor: [20, 30, 70] }
        });

        doc.save('asignaciones.pdf');
      }

      updateLists();
    </script>
  </body>
</html>
